// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: movie_services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MovieServices_AddMovie_FullMethodName    = "/pb.MovieServices/AddMovie"
	MovieServices_ListMovies_FullMethodName  = "/pb.MovieServices/ListMovies"
	MovieServices_DetailMovie_FullMethodName = "/pb.MovieServices/DetailMovie"
	MovieServices_UpdateMovie_FullMethodName = "/pb.MovieServices/UpdateMovie"
	MovieServices_DeleteMovie_FullMethodName = "/pb.MovieServices/DeleteMovie"
)

// MovieServicesClient is the client API for MovieServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServicesClient interface {
	AddMovie(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MovieResponse, error)
	ListMovies(ctx context.Context, in *ListMoviesParams, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	DetailMovie(ctx context.Context, in *MovieIDParams, opts ...grpc.CallOption) (*MovieResponse, error)
	UpdateMovie(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MovieResponse, error)
	DeleteMovie(ctx context.Context, in *MovieIDParams, opts ...grpc.CallOption) (*MovieResponse, error)
}

type movieServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServicesClient(cc grpc.ClientConnInterface) MovieServicesClient {
	return &movieServicesClient{cc}
}

func (c *movieServicesClient) AddMovie(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieServices_AddMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServicesClient) ListMovies(ctx context.Context, in *ListMoviesParams, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, MovieServices_ListMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServicesClient) DetailMovie(ctx context.Context, in *MovieIDParams, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieServices_DetailMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServicesClient) UpdateMovie(ctx context.Context, in *MovieParams, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieServices_UpdateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServicesClient) DeleteMovie(ctx context.Context, in *MovieIDParams, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, MovieServices_DeleteMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServicesServer is the server API for MovieServices service.
// All implementations must embed UnimplementedMovieServicesServer
// for forward compatibility
type MovieServicesServer interface {
	AddMovie(context.Context, *MovieParams) (*MovieResponse, error)
	ListMovies(context.Context, *ListMoviesParams) (*ListMoviesResponse, error)
	DetailMovie(context.Context, *MovieIDParams) (*MovieResponse, error)
	UpdateMovie(context.Context, *MovieParams) (*MovieResponse, error)
	DeleteMovie(context.Context, *MovieIDParams) (*MovieResponse, error)
	mustEmbedUnimplementedMovieServicesServer()
}

// UnimplementedMovieServicesServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServicesServer struct {
}

func (UnimplementedMovieServicesServer) AddMovie(context.Context, *MovieParams) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (UnimplementedMovieServicesServer) ListMovies(context.Context, *ListMoviesParams) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMovieServicesServer) DetailMovie(context.Context, *MovieIDParams) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailMovie not implemented")
}
func (UnimplementedMovieServicesServer) UpdateMovie(context.Context, *MovieParams) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServicesServer) DeleteMovie(context.Context, *MovieIDParams) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServicesServer) mustEmbedUnimplementedMovieServicesServer() {}

// UnsafeMovieServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServicesServer will
// result in compilation errors.
type UnsafeMovieServicesServer interface {
	mustEmbedUnimplementedMovieServicesServer()
}

func RegisterMovieServicesServer(s grpc.ServiceRegistrar, srv MovieServicesServer) {
	s.RegisterService(&MovieServices_ServiceDesc, srv)
}

func _MovieServices_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServicesServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieServices_AddMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServicesServer).AddMovie(ctx, req.(*MovieParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServices_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServicesServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieServices_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServicesServer).ListMovies(ctx, req.(*ListMoviesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServices_DetailMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieIDParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServicesServer).DetailMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieServices_DetailMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServicesServer).DetailMovie(ctx, req.(*MovieIDParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServices_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServicesServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieServices_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServicesServer).UpdateMovie(ctx, req.(*MovieParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieServices_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieIDParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServicesServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieServices_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServicesServer).DeleteMovie(ctx, req.(*MovieIDParams))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieServices_ServiceDesc is the grpc.ServiceDesc for MovieServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovieServices",
	HandlerType: (*MovieServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMovie",
			Handler:    _MovieServices_AddMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _MovieServices_ListMovies_Handler,
		},
		{
			MethodName: "DetailMovie",
			Handler:    _MovieServices_DetailMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieServices_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieServices_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_services.proto",
}
