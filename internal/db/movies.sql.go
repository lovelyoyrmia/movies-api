// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: movies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMovie = `-- name: AddMovie :one
INSERT INTO movies (
    title,
    description,
    rating,
    image
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, description, image, rating, created_at, updated_at
`

type AddMovieParams struct {
	Title       string        `json:"title"`
	Description string        `json:"description"`
	Rating      pgtype.Float8 `json:"rating"`
	Image       pgtype.Text   `json:"image"`
}

func (q *Queries) AddMovie(ctx context.Context, arg AddMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, addMovie,
		arg.Title,
		arg.Description,
		arg.Rating,
		arg.Image,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const detailMovie = `-- name: DetailMovie :one
SELECT id, title, description, image, rating, created_at, updated_at FROM movies
WHERE id = $1
LIMIT 1
`

func (q *Queries) DetailMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRow(ctx, detailMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, description, image, rating, created_at, updated_at FROM movies
LIMIT $1
`

func (q *Queries) ListMovies(ctx context.Context, limit int32) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET
    title = $1,
    description = $2,
    rating = $3,
    image = $4,
    updated_at = 'now()'
WHERE id = $5
RETURNING id, title, description, image, rating, created_at, updated_at
`

type UpdateMovieParams struct {
	Title       string        `json:"title"`
	Description string        `json:"description"`
	Rating      pgtype.Float8 `json:"rating"`
	Image       pgtype.Text   `json:"image"`
	ID          int32         `json:"id"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.Title,
		arg.Description,
		arg.Rating,
		arg.Image,
		arg.ID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
