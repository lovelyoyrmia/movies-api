// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lovelyoyrmia/movies-api/internal/db (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/lovelyoyrmia/movies-api/internal/db"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockStore) AddMovie(arg0 context.Context, arg1 db.AddMovieParams) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockStoreMockRecorder) AddMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockStore)(nil).AddMovie), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockStore) DeleteMovie(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStoreMockRecorder) DeleteMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStore)(nil).DeleteMovie), arg0, arg1)
}

// DetailMovie mocks base method.
func (m *MockStore) DetailMovie(arg0 context.Context, arg1 int32) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMovie indicates an expected call of DetailMovie.
func (mr *MockStoreMockRecorder) DetailMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMovie", reflect.TypeOf((*MockStore)(nil).DetailMovie), arg0, arg1)
}

// ListMovies mocks base method.
func (m *MockStore) ListMovies(arg0 context.Context, arg1 int32) ([]db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", arg0, arg1)
	ret0, _ := ret[0].([]db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStoreMockRecorder) ListMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStore)(nil).ListMovies), arg0, arg1)
}

// UpdateMovie mocks base method.
func (m *MockStore) UpdateMovie(arg0 context.Context, arg1 db.UpdateMovieParams) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockStoreMockRecorder) UpdateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockStore)(nil).UpdateMovie), arg0, arg1)
}
